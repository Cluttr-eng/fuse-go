/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnrichedTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnrichedTransaction{}

// EnrichedTransaction struct for EnrichedTransaction
type EnrichedTransaction struct {
	// A original ID for the transaction that to help you tie data back to your systems.
	Id string `json:"id"`
	// A Fuse defined, unique ID for the merchant associated with this transaction.
	MerchantId *string `json:"merchant_id,omitempty"`
	// The name of the merchant.
	MerchantName *string `json:"merchant_name,omitempty"`
	Logo *MerchantLogo `json:"logo,omitempty"`
	// Hierarchical transaction categories: Each element narrows down from parent to nested sub-categories. Example: ['personnel', 'employee', 'payroll'].
	Categories []string `json:"categories,omitempty"`
}

type _EnrichedTransaction EnrichedTransaction

// NewEnrichedTransaction instantiates a new EnrichedTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrichedTransaction(id string) *EnrichedTransaction {
	this := EnrichedTransaction{}
	this.Id = id
	return &this
}

// NewEnrichedTransactionWithDefaults instantiates a new EnrichedTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrichedTransactionWithDefaults() *EnrichedTransaction {
	this := EnrichedTransaction{}
	return &this
}

// GetId returns the Id field value
func (o *EnrichedTransaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnrichedTransaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnrichedTransaction) SetId(v string) {
	o.Id = v
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *EnrichedTransaction) GetMerchantId() string {
	if o == nil || IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichedTransaction) GetMerchantIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *EnrichedTransaction) HasMerchantId() bool {
	if o != nil && !IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *EnrichedTransaction) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetMerchantName returns the MerchantName field value if set, zero value otherwise.
func (o *EnrichedTransaction) GetMerchantName() string {
	if o == nil || IsNil(o.MerchantName) {
		var ret string
		return ret
	}
	return *o.MerchantName
}

// GetMerchantNameOk returns a tuple with the MerchantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichedTransaction) GetMerchantNameOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantName) {
		return nil, false
	}
	return o.MerchantName, true
}

// HasMerchantName returns a boolean if a field has been set.
func (o *EnrichedTransaction) HasMerchantName() bool {
	if o != nil && !IsNil(o.MerchantName) {
		return true
	}

	return false
}

// SetMerchantName gets a reference to the given string and assigns it to the MerchantName field.
func (o *EnrichedTransaction) SetMerchantName(v string) {
	o.MerchantName = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *EnrichedTransaction) GetLogo() MerchantLogo {
	if o == nil || IsNil(o.Logo) {
		var ret MerchantLogo
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichedTransaction) GetLogoOk() (*MerchantLogo, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *EnrichedTransaction) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given MerchantLogo and assigns it to the Logo field.
func (o *EnrichedTransaction) SetLogo(v MerchantLogo) {
	o.Logo = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *EnrichedTransaction) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichedTransaction) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *EnrichedTransaction) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *EnrichedTransaction) SetCategories(v []string) {
	o.Categories = v
}

func (o EnrichedTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnrichedTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.MerchantId) {
		toSerialize["merchant_id"] = o.MerchantId
	}
	if !IsNil(o.MerchantName) {
		toSerialize["merchant_name"] = o.MerchantName
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

func (o *EnrichedTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnrichedTransaction := _EnrichedTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnrichedTransaction)

	if err != nil {
		return err
	}

	*o = EnrichedTransaction(varEnrichedTransaction)

	return err
}

type NullableEnrichedTransaction struct {
	value *EnrichedTransaction
	isSet bool
}

func (v NullableEnrichedTransaction) Get() *EnrichedTransaction {
	return v.value
}

func (v *NullableEnrichedTransaction) Set(val *EnrichedTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichedTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichedTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichedTransaction(val *EnrichedTransaction) *NullableEnrichedTransaction {
	return &NullableEnrichedTransaction{value: val, isSet: true}
}

func (v NullableEnrichedTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichedTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


