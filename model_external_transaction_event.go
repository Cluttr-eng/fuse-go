/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExternalTransactionEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalTransactionEvent{}

// ExternalTransactionEvent struct for ExternalTransactionEvent
type ExternalTransactionEvent struct {
	// ID of the transaction
	Id string `json:"id"`
	EventType string `json:"event_type"`
	Status ExternalTransactionEventStatus `json:"status"`
	// Amount in cents associated with the transaction. Use positive values to represent money going out and negative to represent money going in.
	Amount float32 `json:"amount"`
	CountryCode *string `json:"country_code,omitempty"`
	// The ISO-4217 currency code.
	IsoCurrencyCode string `json:"iso_currency_code"`
	TransactionType *TransactionEventType `json:"transaction_type,omitempty"`
	TransactionDescription *string `json:"transaction_description,omitempty"`
	TransactionOwnerType *string `json:"transaction_owner_type,omitempty"`
	MerchantName string `json:"merchant_name"`
	// Datetime of the transaction In ISO-8601 format
	Timestamp string `json:"timestamp"`
	// The running balance of the account after the transaction has occurred, in cents
	Balance *float32 `json:"balance,omitempty"`
}

type _ExternalTransactionEvent ExternalTransactionEvent

// NewExternalTransactionEvent instantiates a new ExternalTransactionEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalTransactionEvent(id string, eventType string, status ExternalTransactionEventStatus, amount float32, isoCurrencyCode string, merchantName string, timestamp string) *ExternalTransactionEvent {
	this := ExternalTransactionEvent{}
	this.Id = id
	this.EventType = eventType
	this.Status = status
	this.Amount = amount
	var countryCode string = "US"
	this.CountryCode = &countryCode
	this.IsoCurrencyCode = isoCurrencyCode
	var transactionOwnerType string = "consumer"
	this.TransactionOwnerType = &transactionOwnerType
	this.MerchantName = merchantName
	this.Timestamp = timestamp
	return &this
}

// NewExternalTransactionEventWithDefaults instantiates a new ExternalTransactionEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalTransactionEventWithDefaults() *ExternalTransactionEvent {
	this := ExternalTransactionEvent{}
	var countryCode string = "US"
	this.CountryCode = &countryCode
	var transactionOwnerType string = "consumer"
	this.TransactionOwnerType = &transactionOwnerType
	return &this
}

// GetId returns the Id field value
func (o *ExternalTransactionEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExternalTransactionEvent) SetId(v string) {
	o.Id = v
}

// GetEventType returns the EventType field value
func (o *ExternalTransactionEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *ExternalTransactionEvent) SetEventType(v string) {
	o.EventType = v
}

// GetStatus returns the Status field value
func (o *ExternalTransactionEvent) GetStatus() ExternalTransactionEventStatus {
	if o == nil {
		var ret ExternalTransactionEventStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetStatusOk() (*ExternalTransactionEventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ExternalTransactionEvent) SetStatus(v ExternalTransactionEventStatus) {
	o.Status = v
}

// GetAmount returns the Amount field value
func (o *ExternalTransactionEvent) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ExternalTransactionEvent) SetAmount(v float32) {
	o.Amount = v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *ExternalTransactionEvent) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *ExternalTransactionEvent) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *ExternalTransactionEvent) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value
func (o *ExternalTransactionEvent) GetIsoCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsoCurrencyCode
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsoCurrencyCode, true
}

// SetIsoCurrencyCode sets field value
func (o *ExternalTransactionEvent) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode = v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *ExternalTransactionEvent) GetTransactionType() TransactionEventType {
	if o == nil || IsNil(o.TransactionType) {
		var ret TransactionEventType
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetTransactionTypeOk() (*TransactionEventType, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *ExternalTransactionEvent) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given TransactionEventType and assigns it to the TransactionType field.
func (o *ExternalTransactionEvent) SetTransactionType(v TransactionEventType) {
	o.TransactionType = &v
}

// GetTransactionDescription returns the TransactionDescription field value if set, zero value otherwise.
func (o *ExternalTransactionEvent) GetTransactionDescription() string {
	if o == nil || IsNil(o.TransactionDescription) {
		var ret string
		return ret
	}
	return *o.TransactionDescription
}

// GetTransactionDescriptionOk returns a tuple with the TransactionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetTransactionDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDescription) {
		return nil, false
	}
	return o.TransactionDescription, true
}

// HasTransactionDescription returns a boolean if a field has been set.
func (o *ExternalTransactionEvent) HasTransactionDescription() bool {
	if o != nil && !IsNil(o.TransactionDescription) {
		return true
	}

	return false
}

// SetTransactionDescription gets a reference to the given string and assigns it to the TransactionDescription field.
func (o *ExternalTransactionEvent) SetTransactionDescription(v string) {
	o.TransactionDescription = &v
}

// GetTransactionOwnerType returns the TransactionOwnerType field value if set, zero value otherwise.
func (o *ExternalTransactionEvent) GetTransactionOwnerType() string {
	if o == nil || IsNil(o.TransactionOwnerType) {
		var ret string
		return ret
	}
	return *o.TransactionOwnerType
}

// GetTransactionOwnerTypeOk returns a tuple with the TransactionOwnerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetTransactionOwnerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionOwnerType) {
		return nil, false
	}
	return o.TransactionOwnerType, true
}

// HasTransactionOwnerType returns a boolean if a field has been set.
func (o *ExternalTransactionEvent) HasTransactionOwnerType() bool {
	if o != nil && !IsNil(o.TransactionOwnerType) {
		return true
	}

	return false
}

// SetTransactionOwnerType gets a reference to the given string and assigns it to the TransactionOwnerType field.
func (o *ExternalTransactionEvent) SetTransactionOwnerType(v string) {
	o.TransactionOwnerType = &v
}

// GetMerchantName returns the MerchantName field value
func (o *ExternalTransactionEvent) GetMerchantName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantName
}

// GetMerchantNameOk returns a tuple with the MerchantName field value
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetMerchantNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantName, true
}

// SetMerchantName sets field value
func (o *ExternalTransactionEvent) SetMerchantName(v string) {
	o.MerchantName = v
}

// GetTimestamp returns the Timestamp field value
func (o *ExternalTransactionEvent) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ExternalTransactionEvent) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *ExternalTransactionEvent) GetBalance() float32 {
	if o == nil || IsNil(o.Balance) {
		var ret float32
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalTransactionEvent) GetBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *ExternalTransactionEvent) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float32 and assigns it to the Balance field.
func (o *ExternalTransactionEvent) SetBalance(v float32) {
	o.Balance = &v
}

func (o ExternalTransactionEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalTransactionEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["event_type"] = o.EventType
	toSerialize["status"] = o.Status
	toSerialize["amount"] = o.Amount
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	toSerialize["iso_currency_code"] = o.IsoCurrencyCode
	if !IsNil(o.TransactionType) {
		toSerialize["transaction_type"] = o.TransactionType
	}
	if !IsNil(o.TransactionDescription) {
		toSerialize["transaction_description"] = o.TransactionDescription
	}
	if !IsNil(o.TransactionOwnerType) {
		toSerialize["transaction_owner_type"] = o.TransactionOwnerType
	}
	toSerialize["merchant_name"] = o.MerchantName
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	return toSerialize, nil
}

func (o *ExternalTransactionEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"event_type",
		"status",
		"amount",
		"iso_currency_code",
		"merchant_name",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalTransactionEvent := _ExternalTransactionEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalTransactionEvent)

	if err != nil {
		return err
	}

	*o = ExternalTransactionEvent(varExternalTransactionEvent)

	return err
}

type NullableExternalTransactionEvent struct {
	value *ExternalTransactionEvent
	isSet bool
}

func (v NullableExternalTransactionEvent) Get() *ExternalTransactionEvent {
	return v.value
}

func (v *NullableExternalTransactionEvent) Set(val *ExternalTransactionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalTransactionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalTransactionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalTransactionEvent(val *ExternalTransactionEvent) *NullableExternalTransactionEvent {
	return &NullableExternalTransactionEvent{value: val, isSet: true}
}

func (v NullableExternalTransactionEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalTransactionEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


