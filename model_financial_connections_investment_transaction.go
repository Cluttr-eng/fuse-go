/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the FinancialConnectionsInvestmentTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinancialConnectionsInvestmentTransaction{}

// FinancialConnectionsInvestmentTransaction struct for FinancialConnectionsInvestmentTransaction
type FinancialConnectionsInvestmentTransaction struct {
	// The remote ID of the Investment transaction
	RemoteId string `json:"remote_id"`
	// Remote Account Id of the transaction, ie Plaid Account Id
	RemoteAccountId string `json:"remote_account_id"`
	// The name of the account associated with the investment transaction
	AccountName *string `json:"account_name,omitempty"`
	// The amount of the investment transaction, in cents. The format of this value is a double.
	Amount float32 `json:"amount"`
	// A description of the investment transaction
	Description string `json:"description"`
	// The fees associated with the investment transaction, in cents. The format of this value is a double.
	Fees float32 `json:"fees"`
	Currency Currency `json:"currency"`
	// The date and time of the investment transaction
	Date time.Time `json:"date"`
	// The type of the investment transaction (e.g., 'buy', 'sell', 'dividend')
	Type string `json:"type"`
	Subtype *FinancialConnectionsInvestmentTransactionSubtype `json:"subtype,omitempty"`
	// The number of units of the security involved in this transaction
	Quantity float32 `json:"quantity"`
	// The price of the security involved in this transaction, in cents. The format of this value is a double.
	Price float32 `json:"price"`
	Security FinancialConnectionsInvestmentSecurity `json:"security"`
}

type _FinancialConnectionsInvestmentTransaction FinancialConnectionsInvestmentTransaction

// NewFinancialConnectionsInvestmentTransaction instantiates a new FinancialConnectionsInvestmentTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialConnectionsInvestmentTransaction(remoteId string, remoteAccountId string, amount float32, description string, fees float32, currency Currency, date time.Time, type_ string, quantity float32, price float32, security FinancialConnectionsInvestmentSecurity) *FinancialConnectionsInvestmentTransaction {
	this := FinancialConnectionsInvestmentTransaction{}
	this.RemoteId = remoteId
	this.RemoteAccountId = remoteAccountId
	this.Amount = amount
	this.Description = description
	this.Fees = fees
	this.Currency = currency
	this.Date = date
	this.Type = type_
	this.Quantity = quantity
	this.Price = price
	this.Security = security
	return &this
}

// NewFinancialConnectionsInvestmentTransactionWithDefaults instantiates a new FinancialConnectionsInvestmentTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialConnectionsInvestmentTransactionWithDefaults() *FinancialConnectionsInvestmentTransaction {
	this := FinancialConnectionsInvestmentTransaction{}
	return &this
}

// GetRemoteId returns the RemoteId field value
func (o *FinancialConnectionsInvestmentTransaction) GetRemoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetRemoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteId, true
}

// SetRemoteId sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetRemoteId(v string) {
	o.RemoteId = v
}

// GetRemoteAccountId returns the RemoteAccountId field value
func (o *FinancialConnectionsInvestmentTransaction) GetRemoteAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteAccountId
}

// GetRemoteAccountIdOk returns a tuple with the RemoteAccountId field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetRemoteAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAccountId, true
}

// SetRemoteAccountId sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetRemoteAccountId(v string) {
	o.RemoteAccountId = v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *FinancialConnectionsInvestmentTransaction) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *FinancialConnectionsInvestmentTransaction) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *FinancialConnectionsInvestmentTransaction) SetAccountName(v string) {
	o.AccountName = &v
}

// GetAmount returns the Amount field value
func (o *FinancialConnectionsInvestmentTransaction) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetAmount(v float32) {
	o.Amount = v
}

// GetDescription returns the Description field value
func (o *FinancialConnectionsInvestmentTransaction) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetDescription(v string) {
	o.Description = v
}

// GetFees returns the Fees field value
func (o *FinancialConnectionsInvestmentTransaction) GetFees() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetFeesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fees, true
}

// SetFees sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetFees(v float32) {
	o.Fees = v
}

// GetCurrency returns the Currency field value
func (o *FinancialConnectionsInvestmentTransaction) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetCurrency(v Currency) {
	o.Currency = v
}

// GetDate returns the Date field value
func (o *FinancialConnectionsInvestmentTransaction) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetDate(v time.Time) {
	o.Date = v
}

// GetType returns the Type field value
func (o *FinancialConnectionsInvestmentTransaction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetType(v string) {
	o.Type = v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *FinancialConnectionsInvestmentTransaction) GetSubtype() FinancialConnectionsInvestmentTransactionSubtype {
	if o == nil || IsNil(o.Subtype) {
		var ret FinancialConnectionsInvestmentTransactionSubtype
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetSubtypeOk() (*FinancialConnectionsInvestmentTransactionSubtype, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *FinancialConnectionsInvestmentTransaction) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given FinancialConnectionsInvestmentTransactionSubtype and assigns it to the Subtype field.
func (o *FinancialConnectionsInvestmentTransaction) SetSubtype(v FinancialConnectionsInvestmentTransactionSubtype) {
	o.Subtype = &v
}

// GetQuantity returns the Quantity field value
func (o *FinancialConnectionsInvestmentTransaction) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetQuantity(v float32) {
	o.Quantity = v
}

// GetPrice returns the Price field value
func (o *FinancialConnectionsInvestmentTransaction) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetPrice(v float32) {
	o.Price = v
}

// GetSecurity returns the Security field value
func (o *FinancialConnectionsInvestmentTransaction) GetSecurity() FinancialConnectionsInvestmentSecurity {
	if o == nil {
		var ret FinancialConnectionsInvestmentSecurity
		return ret
	}

	return o.Security
}

// GetSecurityOk returns a tuple with the Security field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionsInvestmentTransaction) GetSecurityOk() (*FinancialConnectionsInvestmentSecurity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Security, true
}

// SetSecurity sets field value
func (o *FinancialConnectionsInvestmentTransaction) SetSecurity(v FinancialConnectionsInvestmentSecurity) {
	o.Security = v
}

func (o FinancialConnectionsInvestmentTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinancialConnectionsInvestmentTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remote_id"] = o.RemoteId
	toSerialize["remote_account_id"] = o.RemoteAccountId
	if !IsNil(o.AccountName) {
		toSerialize["account_name"] = o.AccountName
	}
	toSerialize["amount"] = o.Amount
	toSerialize["description"] = o.Description
	toSerialize["fees"] = o.Fees
	toSerialize["currency"] = o.Currency
	toSerialize["date"] = o.Date
	toSerialize["type"] = o.Type
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	toSerialize["quantity"] = o.Quantity
	toSerialize["price"] = o.Price
	toSerialize["security"] = o.Security
	return toSerialize, nil
}

func (o *FinancialConnectionsInvestmentTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remote_id",
		"remote_account_id",
		"amount",
		"description",
		"fees",
		"currency",
		"date",
		"type",
		"quantity",
		"price",
		"security",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFinancialConnectionsInvestmentTransaction := _FinancialConnectionsInvestmentTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFinancialConnectionsInvestmentTransaction)

	if err != nil {
		return err
	}

	*o = FinancialConnectionsInvestmentTransaction(varFinancialConnectionsInvestmentTransaction)

	return err
}

type NullableFinancialConnectionsInvestmentTransaction struct {
	value *FinancialConnectionsInvestmentTransaction
	isSet bool
}

func (v NullableFinancialConnectionsInvestmentTransaction) Get() *FinancialConnectionsInvestmentTransaction {
	return v.value
}

func (v *NullableFinancialConnectionsInvestmentTransaction) Set(val *FinancialConnectionsInvestmentTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialConnectionsInvestmentTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialConnectionsInvestmentTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialConnectionsInvestmentTransaction(val *FinancialConnectionsInvestmentTransaction) *NullableFinancialConnectionsInvestmentTransaction {
	return &NullableFinancialConnectionsInvestmentTransaction{value: val, isSet: true}
}

func (v NullableFinancialConnectionsInvestmentTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialConnectionsInvestmentTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


