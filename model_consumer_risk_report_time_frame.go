/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"fmt"
)

// ConsumerRiskReportTimeFrame The timeframe to base the consumer risk report on.
type ConsumerRiskReportTimeFrame string

// List of ConsumerRiskReportTimeFrame
const (
	CONSUMERRISKREPORTTIMEFRAME_DAILY ConsumerRiskReportTimeFrame = "daily"
	CONSUMERRISKREPORTTIMEFRAME_WEEKLY ConsumerRiskReportTimeFrame = "weekly"
	CONSUMERRISKREPORTTIMEFRAME_MONTHLY ConsumerRiskReportTimeFrame = "monthly"
)

// All allowed values of ConsumerRiskReportTimeFrame enum
var AllowedConsumerRiskReportTimeFrameEnumValues = []ConsumerRiskReportTimeFrame{
	"daily",
	"weekly",
	"monthly",
}

func (v *ConsumerRiskReportTimeFrame) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConsumerRiskReportTimeFrame(value)
	for _, existing := range AllowedConsumerRiskReportTimeFrameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConsumerRiskReportTimeFrame", value)
}

// NewConsumerRiskReportTimeFrameFromValue returns a pointer to a valid ConsumerRiskReportTimeFrame
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConsumerRiskReportTimeFrameFromValue(v string) (*ConsumerRiskReportTimeFrame, error) {
	ev := ConsumerRiskReportTimeFrame(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConsumerRiskReportTimeFrame: valid values are %v", v, AllowedConsumerRiskReportTimeFrameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConsumerRiskReportTimeFrame) IsValid() bool {
	for _, existing := range AllowedConsumerRiskReportTimeFrameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConsumerRiskReportTimeFrame value
func (v ConsumerRiskReportTimeFrame) Ptr() *ConsumerRiskReportTimeFrame {
	return &v
}

type NullableConsumerRiskReportTimeFrame struct {
	value *ConsumerRiskReportTimeFrame
	isSet bool
}

func (v NullableConsumerRiskReportTimeFrame) Get() *ConsumerRiskReportTimeFrame {
	return v.value
}

func (v *NullableConsumerRiskReportTimeFrame) Set(val *ConsumerRiskReportTimeFrame) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerRiskReportTimeFrame) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerRiskReportTimeFrame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerRiskReportTimeFrame(val *ConsumerRiskReportTimeFrame) *NullableConsumerRiskReportTimeFrame {
	return &NullableConsumerRiskReportTimeFrame{value: val, isSet: true}
}

func (v NullableConsumerRiskReportTimeFrame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerRiskReportTimeFrame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

