/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
)

// checks if the InAppTransactionEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InAppTransactionEvent{}

// InAppTransactionEvent struct for InAppTransactionEvent
type InAppTransactionEvent struct {
	// ID of the transaction
	Id string `json:"id"`
	EventType string `json:"event_type"`
	Status InAppTransactionEventStatus `json:"status"`
	Amount float32 `json:"amount"`
	// The ISO-4217 currency code.
	IsoCurrencyCode string `json:"iso_currency_code"`
	TransactionType *TransactionEventType `json:"transaction_type,omitempty"`
	MerchantName string `json:"merchant_name"`
	// Datetime of the transaction In ISO-8601 format
	Timestamp string `json:"timestamp"`
	// The running balance of the account after the transaction has occurred, in cents.
	Balance *float32 `json:"balance,omitempty"`
}

// NewInAppTransactionEvent instantiates a new InAppTransactionEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInAppTransactionEvent(id string, eventType string, status InAppTransactionEventStatus, amount float32, isoCurrencyCode string, merchantName string, timestamp string) *InAppTransactionEvent {
	this := InAppTransactionEvent{}
	this.Id = id
	this.EventType = eventType
	this.Status = status
	this.Amount = amount
	this.IsoCurrencyCode = isoCurrencyCode
	this.MerchantName = merchantName
	this.Timestamp = timestamp
	return &this
}

// NewInAppTransactionEventWithDefaults instantiates a new InAppTransactionEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInAppTransactionEventWithDefaults() *InAppTransactionEvent {
	this := InAppTransactionEvent{}
	return &this
}

// GetId returns the Id field value
func (o *InAppTransactionEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InAppTransactionEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InAppTransactionEvent) SetId(v string) {
	o.Id = v
}

// GetEventType returns the EventType field value
func (o *InAppTransactionEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *InAppTransactionEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *InAppTransactionEvent) SetEventType(v string) {
	o.EventType = v
}

// GetStatus returns the Status field value
func (o *InAppTransactionEvent) GetStatus() InAppTransactionEventStatus {
	if o == nil {
		var ret InAppTransactionEventStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InAppTransactionEvent) GetStatusOk() (*InAppTransactionEventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InAppTransactionEvent) SetStatus(v InAppTransactionEventStatus) {
	o.Status = v
}

// GetAmount returns the Amount field value
func (o *InAppTransactionEvent) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *InAppTransactionEvent) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *InAppTransactionEvent) SetAmount(v float32) {
	o.Amount = v
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value
func (o *InAppTransactionEvent) GetIsoCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsoCurrencyCode
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *InAppTransactionEvent) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsoCurrencyCode, true
}

// SetIsoCurrencyCode sets field value
func (o *InAppTransactionEvent) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode = v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *InAppTransactionEvent) GetTransactionType() TransactionEventType {
	if o == nil || IsNil(o.TransactionType) {
		var ret TransactionEventType
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InAppTransactionEvent) GetTransactionTypeOk() (*TransactionEventType, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *InAppTransactionEvent) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given TransactionEventType and assigns it to the TransactionType field.
func (o *InAppTransactionEvent) SetTransactionType(v TransactionEventType) {
	o.TransactionType = &v
}

// GetMerchantName returns the MerchantName field value
func (o *InAppTransactionEvent) GetMerchantName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantName
}

// GetMerchantNameOk returns a tuple with the MerchantName field value
// and a boolean to check if the value has been set.
func (o *InAppTransactionEvent) GetMerchantNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantName, true
}

// SetMerchantName sets field value
func (o *InAppTransactionEvent) SetMerchantName(v string) {
	o.MerchantName = v
}

// GetTimestamp returns the Timestamp field value
func (o *InAppTransactionEvent) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *InAppTransactionEvent) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *InAppTransactionEvent) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *InAppTransactionEvent) GetBalance() float32 {
	if o == nil || IsNil(o.Balance) {
		var ret float32
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InAppTransactionEvent) GetBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *InAppTransactionEvent) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float32 and assigns it to the Balance field.
func (o *InAppTransactionEvent) SetBalance(v float32) {
	o.Balance = &v
}

func (o InAppTransactionEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InAppTransactionEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["event_type"] = o.EventType
	toSerialize["status"] = o.Status
	toSerialize["amount"] = o.Amount
	toSerialize["iso_currency_code"] = o.IsoCurrencyCode
	if !IsNil(o.TransactionType) {
		toSerialize["transaction_type"] = o.TransactionType
	}
	toSerialize["merchant_name"] = o.MerchantName
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	return toSerialize, nil
}

type NullableInAppTransactionEvent struct {
	value *InAppTransactionEvent
	isSet bool
}

func (v NullableInAppTransactionEvent) Get() *InAppTransactionEvent {
	return v.value
}

func (v *NullableInAppTransactionEvent) Set(val *InAppTransactionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableInAppTransactionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableInAppTransactionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInAppTransactionEvent(val *InAppTransactionEvent) *NullableInAppTransactionEvent {
	return &NullableInAppTransactionEvent{value: val, isSet: true}
}

func (v NullableInAppTransactionEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInAppTransactionEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


