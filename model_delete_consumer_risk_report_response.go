/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
)

// checks if the DeleteConsumerRiskReportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteConsumerRiskReportResponse{}

// DeleteConsumerRiskReportResponse struct for DeleteConsumerRiskReportResponse
type DeleteConsumerRiskReportResponse struct {
	Id string `json:"id"`
	// An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
	RequestId string `json:"request_id"`
}

// NewDeleteConsumerRiskReportResponse instantiates a new DeleteConsumerRiskReportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteConsumerRiskReportResponse(id string, requestId string) *DeleteConsumerRiskReportResponse {
	this := DeleteConsumerRiskReportResponse{}
	this.Id = id
	this.RequestId = requestId
	return &this
}

// NewDeleteConsumerRiskReportResponseWithDefaults instantiates a new DeleteConsumerRiskReportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteConsumerRiskReportResponseWithDefaults() *DeleteConsumerRiskReportResponse {
	this := DeleteConsumerRiskReportResponse{}
	return &this
}

// GetId returns the Id field value
func (o *DeleteConsumerRiskReportResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeleteConsumerRiskReportResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeleteConsumerRiskReportResponse) SetId(v string) {
	o.Id = v
}

// GetRequestId returns the RequestId field value
func (o *DeleteConsumerRiskReportResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *DeleteConsumerRiskReportResponse) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *DeleteConsumerRiskReportResponse) SetRequestId(v string) {
	o.RequestId = v
}

func (o DeleteConsumerRiskReportResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteConsumerRiskReportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["request_id"] = o.RequestId
	return toSerialize, nil
}

type NullableDeleteConsumerRiskReportResponse struct {
	value *DeleteConsumerRiskReportResponse
	isSet bool
}

func (v NullableDeleteConsumerRiskReportResponse) Get() *DeleteConsumerRiskReportResponse {
	return v.value
}

func (v *NullableDeleteConsumerRiskReportResponse) Set(val *DeleteConsumerRiskReportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteConsumerRiskReportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteConsumerRiskReportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteConsumerRiskReportResponse(val *DeleteConsumerRiskReportResponse) *NullableDeleteConsumerRiskReportResponse {
	return &NullableDeleteConsumerRiskReportResponse{value: val, isSet: true}
}

func (v NullableDeleteConsumerRiskReportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteConsumerRiskReportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


