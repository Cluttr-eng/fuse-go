/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssetReportTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetReportTransaction{}

// AssetReportTransaction struct for AssetReportTransaction
type AssetReportTransaction struct {
	// Remote Id of the transaction, ie Plaid or Teller Id
	RemoteId string `json:"remote_id"`
	// Remote Account Id of the transaction, ie Plaid Account Id
	RemoteAccountId string `json:"remote_account_id"`
	// Amount in cents associated with the transaction. The format of this value is a double. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
	Amount float32 `json:"amount"`
	// Date of the transaction (YYYY-MM-DD)
	Date string `json:"date"`
	// Description of the transaction
	Description string `json:"description"`
	// Categories of the transaction, ie Computers and Electronics. '-' means we could not map the upstream category.
	Category []string `json:"category"`
	Merchant TransactionMerchant `json:"merchant"`
	// The status of the transaction. This will be either posted or pending.
	Status string `json:"status"`
	// The ISO-4217 currency code of the transaction
	IsoCurrencyCode *string `json:"iso_currency_code,omitempty"`
	RemoteData interface{} `json:"remote_data"`
}

type _AssetReportTransaction AssetReportTransaction

// NewAssetReportTransaction instantiates a new AssetReportTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetReportTransaction(remoteId string, remoteAccountId string, amount float32, date string, description string, category []string, merchant TransactionMerchant, status string, remoteData interface{}) *AssetReportTransaction {
	this := AssetReportTransaction{}
	this.RemoteId = remoteId
	this.RemoteAccountId = remoteAccountId
	this.Amount = amount
	this.Date = date
	this.Description = description
	this.Category = category
	this.Merchant = merchant
	this.Status = status
	this.RemoteData = remoteData
	return &this
}

// NewAssetReportTransactionWithDefaults instantiates a new AssetReportTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetReportTransactionWithDefaults() *AssetReportTransaction {
	this := AssetReportTransaction{}
	return &this
}

// GetRemoteId returns the RemoteId field value
func (o *AssetReportTransaction) GetRemoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetRemoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteId, true
}

// SetRemoteId sets field value
func (o *AssetReportTransaction) SetRemoteId(v string) {
	o.RemoteId = v
}

// GetRemoteAccountId returns the RemoteAccountId field value
func (o *AssetReportTransaction) GetRemoteAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteAccountId
}

// GetRemoteAccountIdOk returns a tuple with the RemoteAccountId field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetRemoteAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAccountId, true
}

// SetRemoteAccountId sets field value
func (o *AssetReportTransaction) SetRemoteAccountId(v string) {
	o.RemoteAccountId = v
}

// GetAmount returns the Amount field value
func (o *AssetReportTransaction) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AssetReportTransaction) SetAmount(v float32) {
	o.Amount = v
}

// GetDate returns the Date field value
func (o *AssetReportTransaction) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *AssetReportTransaction) SetDate(v string) {
	o.Date = v
}

// GetDescription returns the Description field value
func (o *AssetReportTransaction) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *AssetReportTransaction) SetDescription(v string) {
	o.Description = v
}

// GetCategory returns the Category field value
func (o *AssetReportTransaction) GetCategory() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetCategoryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category, true
}

// SetCategory sets field value
func (o *AssetReportTransaction) SetCategory(v []string) {
	o.Category = v
}

// GetMerchant returns the Merchant field value
func (o *AssetReportTransaction) GetMerchant() TransactionMerchant {
	if o == nil {
		var ret TransactionMerchant
		return ret
	}

	return o.Merchant
}

// GetMerchantOk returns a tuple with the Merchant field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetMerchantOk() (*TransactionMerchant, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Merchant, true
}

// SetMerchant sets field value
func (o *AssetReportTransaction) SetMerchant(v TransactionMerchant) {
	o.Merchant = v
}

// GetStatus returns the Status field value
func (o *AssetReportTransaction) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AssetReportTransaction) SetStatus(v string) {
	o.Status = v
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value if set, zero value otherwise.
func (o *AssetReportTransaction) GetIsoCurrencyCode() string {
	if o == nil || IsNil(o.IsoCurrencyCode) {
		var ret string
		return ret
	}
	return *o.IsoCurrencyCode
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IsoCurrencyCode) {
		return nil, false
	}
	return o.IsoCurrencyCode, true
}

// HasIsoCurrencyCode returns a boolean if a field has been set.
func (o *AssetReportTransaction) HasIsoCurrencyCode() bool {
	if o != nil && !IsNil(o.IsoCurrencyCode) {
		return true
	}

	return false
}

// SetIsoCurrencyCode gets a reference to the given string and assigns it to the IsoCurrencyCode field.
func (o *AssetReportTransaction) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode = &v
}

// GetRemoteData returns the RemoteData field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *AssetReportTransaction) GetRemoteData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetRemoteDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RemoteData) {
		return nil, false
	}
	return &o.RemoteData, true
}

// SetRemoteData sets field value
func (o *AssetReportTransaction) SetRemoteData(v interface{}) {
	o.RemoteData = v
}

func (o AssetReportTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetReportTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remote_id"] = o.RemoteId
	toSerialize["remote_account_id"] = o.RemoteAccountId
	toSerialize["amount"] = o.Amount
	toSerialize["date"] = o.Date
	toSerialize["description"] = o.Description
	toSerialize["category"] = o.Category
	toSerialize["merchant"] = o.Merchant
	toSerialize["status"] = o.Status
	if !IsNil(o.IsoCurrencyCode) {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	return toSerialize, nil
}

func (o *AssetReportTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remote_id",
		"remote_account_id",
		"amount",
		"date",
		"description",
		"category",
		"merchant",
		"status",
		"remote_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssetReportTransaction := _AssetReportTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssetReportTransaction)

	if err != nil {
		return err
	}

	*o = AssetReportTransaction(varAssetReportTransaction)

	return err
}

type NullableAssetReportTransaction struct {
	value *AssetReportTransaction
	isSet bool
}

func (v NullableAssetReportTransaction) Get() *AssetReportTransaction {
	return v.value
}

func (v *NullableAssetReportTransaction) Set(val *AssetReportTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetReportTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetReportTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetReportTransaction(val *AssetReportTransaction) *NullableAssetReportTransaction {
	return &NullableAssetReportTransaction{value: val, isSet: true}
}

func (v NullableAssetReportTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetReportTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


