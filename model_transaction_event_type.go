/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"fmt"
)

// TransactionEventType Type of the transaction, ie loan
type TransactionEventType string

// List of TransactionEventType
const (
	TRANSACTIONEVENTTYPE_ACH TransactionEventType = "ach"
	TRANSACTIONEVENTTYPE_ADJUSTMENT TransactionEventType = "adjustment"
	TRANSACTIONEVENTTYPE_ATM TransactionEventType = "atm"
	TRANSACTIONEVENTTYPE_BANK_CHARGE TransactionEventType = "bank_charge"
	TRANSACTIONEVENTTYPE_BILL_PAYMENT TransactionEventType = "bill_payment"
	TRANSACTIONEVENTTYPE_CARD_PAYMENT TransactionEventType = "card_payment"
	TRANSACTIONEVENTTYPE_CASH TransactionEventType = "cash"
	TRANSACTIONEVENTTYPE_CASHBACK TransactionEventType = "cashback"
	TRANSACTIONEVENTTYPE_CHARGE TransactionEventType = "charge"
	TRANSACTIONEVENTTYPE_CHEQUE TransactionEventType = "cheque"
	TRANSACTIONEVENTTYPE_CREDIT TransactionEventType = "credit"
	TRANSACTIONEVENTTYPE_DEBIT TransactionEventType = "debit"
	TRANSACTIONEVENTTYPE_DEPOSIT TransactionEventType = "deposit"
	TRANSACTIONEVENTTYPE_DIGITAL_PAYMENT TransactionEventType = "digital_payment"
	TRANSACTIONEVENTTYPE_DIRECT_DEBIT TransactionEventType = "direct_debit"
	TRANSACTIONEVENTTYPE_FEE TransactionEventType = "fee"
	TRANSACTIONEVENTTYPE_IN_STORE TransactionEventType = "in_store"
	TRANSACTIONEVENTTYPE_INTEREST TransactionEventType = "interest"
	TRANSACTIONEVENTTYPE_ONLINE TransactionEventType = "online"
	TRANSACTIONEVENTTYPE_OTHER TransactionEventType = "other"
	TRANSACTIONEVENTTYPE_PAYMENT TransactionEventType = "payment"
	TRANSACTIONEVENTTYPE_PURCHASE TransactionEventType = "purchase"
	TRANSACTIONEVENTTYPE_STANDING_ORDER TransactionEventType = "standing_order"
	TRANSACTIONEVENTTYPE_TRANSACTION TransactionEventType = "transaction"
	TRANSACTIONEVENTTYPE_TRANSFER TransactionEventType = "transfer"
	TRANSACTIONEVENTTYPE_WIRE TransactionEventType = "wire"
	TRANSACTIONEVENTTYPE_WITHDRAWAL TransactionEventType = "withdrawal"
)

// All allowed values of TransactionEventType enum
var AllowedTransactionEventTypeEnumValues = []TransactionEventType{
	"ach",
	"adjustment",
	"atm",
	"bank_charge",
	"bill_payment",
	"card_payment",
	"cash",
	"cashback",
	"charge",
	"cheque",
	"credit",
	"debit",
	"deposit",
	"digital_payment",
	"direct_debit",
	"fee",
	"in_store",
	"interest",
	"online",
	"other",
	"payment",
	"purchase",
	"standing_order",
	"transaction",
	"transfer",
	"wire",
	"withdrawal",
}

func (v *TransactionEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionEventType(value)
	for _, existing := range AllowedTransactionEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionEventType", value)
}

// NewTransactionEventTypeFromValue returns a pointer to a valid TransactionEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionEventTypeFromValue(v string) (*TransactionEventType, error) {
	ev := TransactionEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionEventType: valid values are %v", v, AllowedTransactionEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionEventType) IsValid() bool {
	for _, existing := range AllowedTransactionEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionEventType value
func (v TransactionEventType) Ptr() *TransactionEventType {
	return &v
}

type NullableTransactionEventType struct {
	value *TransactionEventType
	isSet bool
}

func (v NullableTransactionEventType) Get() *TransactionEventType {
	return v.value
}

func (v *NullableTransactionEventType) Set(val *TransactionEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionEventType(val *TransactionEventType) *NullableTransactionEventType {
	return &NullableTransactionEventType{value: val, isSet: true}
}

func (v NullableTransactionEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

