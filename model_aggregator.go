/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"fmt"
)

// Aggregator the model 'Aggregator'
type Aggregator string

// List of Aggregator
const (
	AGGREGATOR_AKOYA Aggregator = "akoya"
	AGGREGATOR_BASIQ Aggregator = "basiq"
	AGGREGATOR_BELVO Aggregator = "belvo"
	AGGREGATOR_FINICITY Aggregator = "finicity"
	AGGREGATOR_FINVERSE Aggregator = "finverse"
	AGGREGATOR_FLINKS Aggregator = "flinks"
	AGGREGATOR_MONO Aggregator = "mono"
	AGGREGATOR_MX Aggregator = "mx"
	AGGREGATOR_PLAID Aggregator = "plaid"
	AGGREGATOR_SNAPTRADE Aggregator = "snaptrade"
	AGGREGATOR_TELLER Aggregator = "teller"
	AGGREGATOR_TRUELAYER Aggregator = "truelayer"
)

// All allowed values of Aggregator enum
var AllowedAggregatorEnumValues = []Aggregator{
	"akoya",
	"basiq",
	"belvo",
	"finicity",
	"finverse",
	"flinks",
	"mono",
	"mx",
	"plaid",
	"snaptrade",
	"teller",
	"truelayer",
}

func (v *Aggregator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Aggregator(value)
	for _, existing := range AllowedAggregatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Aggregator", value)
}

// NewAggregatorFromValue returns a pointer to a valid Aggregator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregatorFromValue(v string) (*Aggregator, error) {
	ev := Aggregator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Aggregator: valid values are %v", v, AllowedAggregatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Aggregator) IsValid() bool {
	for _, existing := range AllowedAggregatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Aggregator value
func (v Aggregator) Ptr() *Aggregator {
	return &v
}

type NullableAggregator struct {
	value *Aggregator
	isSet bool
}

func (v NullableAggregator) Get() *Aggregator {
	return v.value
}

func (v *NullableAggregator) Set(val *Aggregator) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregator) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregator(val *Aggregator) *NullableAggregator {
	return &NullableAggregator{value: val, isSet: true}
}

func (v NullableAggregator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

