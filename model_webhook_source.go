/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"fmt"
)

// WebhookSource the model 'WebhookSource'
type WebhookSource string

// List of WebhookSource
const (
	WEBHOOKSOURCE_PLAID WebhookSource = "plaid"
	WEBHOOKSOURCE_TELLER WebhookSource = "teller"
	WEBHOOKSOURCE_MX WebhookSource = "mx"
	WEBHOOKSOURCE_FUSE WebhookSource = "fuse"
	WEBHOOKSOURCE_SNAPTRADE WebhookSource = "snaptrade"
	WEBHOOKSOURCE_MONO WebhookSource = "mono"
	WEBHOOKSOURCE_TRUELAYER WebhookSource = "truelayer"
	WEBHOOKSOURCE_FINVERSE WebhookSource = "finverse"
)

// All allowed values of WebhookSource enum
var AllowedWebhookSourceEnumValues = []WebhookSource{
	"plaid",
	"teller",
	"mx",
	"fuse",
	"snaptrade",
	"mono",
	"truelayer",
	"finverse",
}

func (v *WebhookSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookSource(value)
	for _, existing := range AllowedWebhookSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookSource", value)
}

// NewWebhookSourceFromValue returns a pointer to a valid WebhookSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookSourceFromValue(v string) (*WebhookSource, error) {
	ev := WebhookSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookSource: valid values are %v", v, AllowedWebhookSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookSource) IsValid() bool {
	for _, existing := range AllowedWebhookSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebhookSource value
func (v WebhookSource) Ptr() *WebhookSource {
	return &v
}

type NullableWebhookSource struct {
	value *WebhookSource
	isSet bool
}

func (v NullableWebhookSource) Get() *WebhookSource {
	return v.value
}

func (v *NullableWebhookSource) Set(val *WebhookSource) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookSource) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookSource(val *WebhookSource) *NullableWebhookSource {
	return &NullableWebhookSource{value: val, isSet: true}
}

func (v NullableWebhookSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

