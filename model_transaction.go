/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction struct for Transaction
type Transaction struct {
	// Remote Id of the transaction, ie Plaid or Teller Id
	RemoteId string `json:"remote_id"`
	// Uniquely identifies this transaction across all transactions for a single financial connection. Used for reconnection deduplication. This field may or may not be present depending on if a transaction can be uniquely identified. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
	Fingerprint *string `json:"fingerprint,omitempty"`
	// Remote Account Id of the transaction, ie Plaid Account Id
	RemoteAccountId string `json:"remote_account_id"`
	// Amount in cents associated with the transaction. The format of this value is a double.  Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
	Amount float32 `json:"amount"`
	// Date of the transaction (YYYY-MM-DD)
	Date string `json:"date"`
	// Description of the transaction
	Description string `json:"description"`
	// Categories of the transaction, i.e., Computers and Electronics. You can download the categories from [here](https://fuse-public-bucket.s3.amazonaws.com/transaction-categories.csv)
	Category []string `json:"category"`
	Merchant TransactionMerchant `json:"merchant"`
	// The status of the transaction. This will be either posted or pending.
	Status string `json:"status"`
	// Type of the transaction, ie adjustment. '-' means we were not able to map the upstream type.
	Type string `json:"type"`
	// The ISO-4217 currency code of the transaction
	IsoCurrencyCode *string `json:"iso_currency_code,omitempty"`
	RemoteData interface{} `json:"remote_data"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(remoteId string, remoteAccountId string, amount float32, date string, description string, category []string, merchant TransactionMerchant, status string, type_ string, remoteData interface{}) *Transaction {
	this := Transaction{}
	this.RemoteId = remoteId
	this.RemoteAccountId = remoteAccountId
	this.Amount = amount
	this.Date = date
	this.Description = description
	this.Category = category
	this.Merchant = merchant
	this.Status = status
	this.Type = type_
	this.RemoteData = remoteData
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetRemoteId returns the RemoteId field value
func (o *Transaction) GetRemoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetRemoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteId, true
}

// SetRemoteId sets field value
func (o *Transaction) SetRemoteId(v string) {
	o.RemoteId = v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *Transaction) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *Transaction) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *Transaction) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetRemoteAccountId returns the RemoteAccountId field value
func (o *Transaction) GetRemoteAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteAccountId
}

// GetRemoteAccountIdOk returns a tuple with the RemoteAccountId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetRemoteAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAccountId, true
}

// SetRemoteAccountId sets field value
func (o *Transaction) SetRemoteAccountId(v string) {
	o.RemoteAccountId = v
}

// GetAmount returns the Amount field value
func (o *Transaction) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Transaction) SetAmount(v float32) {
	o.Amount = v
}

// GetDate returns the Date field value
func (o *Transaction) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Transaction) SetDate(v string) {
	o.Date = v
}

// GetDescription returns the Description field value
func (o *Transaction) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Transaction) SetDescription(v string) {
	o.Description = v
}

// GetCategory returns the Category field value
func (o *Transaction) GetCategory() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCategoryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category, true
}

// SetCategory sets field value
func (o *Transaction) SetCategory(v []string) {
	o.Category = v
}

// GetMerchant returns the Merchant field value
func (o *Transaction) GetMerchant() TransactionMerchant {
	if o == nil {
		var ret TransactionMerchant
		return ret
	}

	return o.Merchant
}

// GetMerchantOk returns a tuple with the Merchant field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetMerchantOk() (*TransactionMerchant, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Merchant, true
}

// SetMerchant sets field value
func (o *Transaction) SetMerchant(v TransactionMerchant) {
	o.Merchant = v
}

// GetStatus returns the Status field value
func (o *Transaction) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Transaction) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *Transaction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transaction) SetType(v string) {
	o.Type = v
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value if set, zero value otherwise.
func (o *Transaction) GetIsoCurrencyCode() string {
	if o == nil || IsNil(o.IsoCurrencyCode) {
		var ret string
		return ret
	}
	return *o.IsoCurrencyCode
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IsoCurrencyCode) {
		return nil, false
	}
	return o.IsoCurrencyCode, true
}

// HasIsoCurrencyCode returns a boolean if a field has been set.
func (o *Transaction) HasIsoCurrencyCode() bool {
	if o != nil && !IsNil(o.IsoCurrencyCode) {
		return true
	}

	return false
}

// SetIsoCurrencyCode gets a reference to the given string and assigns it to the IsoCurrencyCode field.
func (o *Transaction) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode = &v
}

// GetRemoteData returns the RemoteData field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Transaction) GetRemoteData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transaction) GetRemoteDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RemoteData) {
		return nil, false
	}
	return &o.RemoteData, true
}

// SetRemoteData sets field value
func (o *Transaction) SetRemoteData(v interface{}) {
	o.RemoteData = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remote_id"] = o.RemoteId
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	toSerialize["remote_account_id"] = o.RemoteAccountId
	toSerialize["amount"] = o.Amount
	toSerialize["date"] = o.Date
	toSerialize["description"] = o.Description
	toSerialize["category"] = o.Category
	toSerialize["merchant"] = o.Merchant
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type
	if !IsNil(o.IsoCurrencyCode) {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	return toSerialize, nil
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


