/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FinancialConnectionDetailsSnaptrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinancialConnectionDetailsSnaptrade{}

// FinancialConnectionDetailsSnaptrade Data needed to query data from SnapTrade
type FinancialConnectionDetailsSnaptrade struct {
	// Brokerage Authorization Id for SnapTrade
	BrokerageAuthorizationId string `json:"brokerage_authorization_id"`
	// User id for SnapTrade
	UserId string `json:"user_id"`
	// User secret for SnapTrade
	UserSecret string `json:"user_secret"`
}

type _FinancialConnectionDetailsSnaptrade FinancialConnectionDetailsSnaptrade

// NewFinancialConnectionDetailsSnaptrade instantiates a new FinancialConnectionDetailsSnaptrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialConnectionDetailsSnaptrade(brokerageAuthorizationId string, userId string, userSecret string) *FinancialConnectionDetailsSnaptrade {
	this := FinancialConnectionDetailsSnaptrade{}
	this.BrokerageAuthorizationId = brokerageAuthorizationId
	this.UserId = userId
	this.UserSecret = userSecret
	return &this
}

// NewFinancialConnectionDetailsSnaptradeWithDefaults instantiates a new FinancialConnectionDetailsSnaptrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialConnectionDetailsSnaptradeWithDefaults() *FinancialConnectionDetailsSnaptrade {
	this := FinancialConnectionDetailsSnaptrade{}
	return &this
}

// GetBrokerageAuthorizationId returns the BrokerageAuthorizationId field value
func (o *FinancialConnectionDetailsSnaptrade) GetBrokerageAuthorizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BrokerageAuthorizationId
}

// GetBrokerageAuthorizationIdOk returns a tuple with the BrokerageAuthorizationId field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionDetailsSnaptrade) GetBrokerageAuthorizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrokerageAuthorizationId, true
}

// SetBrokerageAuthorizationId sets field value
func (o *FinancialConnectionDetailsSnaptrade) SetBrokerageAuthorizationId(v string) {
	o.BrokerageAuthorizationId = v
}

// GetUserId returns the UserId field value
func (o *FinancialConnectionDetailsSnaptrade) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionDetailsSnaptrade) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *FinancialConnectionDetailsSnaptrade) SetUserId(v string) {
	o.UserId = v
}

// GetUserSecret returns the UserSecret field value
func (o *FinancialConnectionDetailsSnaptrade) GetUserSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserSecret
}

// GetUserSecretOk returns a tuple with the UserSecret field value
// and a boolean to check if the value has been set.
func (o *FinancialConnectionDetailsSnaptrade) GetUserSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserSecret, true
}

// SetUserSecret sets field value
func (o *FinancialConnectionDetailsSnaptrade) SetUserSecret(v string) {
	o.UserSecret = v
}

func (o FinancialConnectionDetailsSnaptrade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinancialConnectionDetailsSnaptrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["brokerage_authorization_id"] = o.BrokerageAuthorizationId
	toSerialize["user_id"] = o.UserId
	toSerialize["user_secret"] = o.UserSecret
	return toSerialize, nil
}

func (o *FinancialConnectionDetailsSnaptrade) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"brokerage_authorization_id",
		"user_id",
		"user_secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFinancialConnectionDetailsSnaptrade := _FinancialConnectionDetailsSnaptrade{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFinancialConnectionDetailsSnaptrade)

	if err != nil {
		return err
	}

	*o = FinancialConnectionDetailsSnaptrade(varFinancialConnectionDetailsSnaptrade)

	return err
}

type NullableFinancialConnectionDetailsSnaptrade struct {
	value *FinancialConnectionDetailsSnaptrade
	isSet bool
}

func (v NullableFinancialConnectionDetailsSnaptrade) Get() *FinancialConnectionDetailsSnaptrade {
	return v.value
}

func (v *NullableFinancialConnectionDetailsSnaptrade) Set(val *FinancialConnectionDetailsSnaptrade) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialConnectionDetailsSnaptrade) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialConnectionDetailsSnaptrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialConnectionDetailsSnaptrade(val *FinancialConnectionDetailsSnaptrade) *NullableFinancialConnectionDetailsSnaptrade {
	return &NullableFinancialConnectionDetailsSnaptrade{value: val, isSet: true}
}

func (v NullableFinancialConnectionDetailsSnaptrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialConnectionDetailsSnaptrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


