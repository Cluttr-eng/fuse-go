/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
)

// checks if the MerchantLogo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantLogo{}

// MerchantLogo struct for MerchantLogo
type MerchantLogo struct {
	// The URL of the logo.
	Url *string `json:"url,omitempty"`
}

// NewMerchantLogo instantiates a new MerchantLogo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantLogo() *MerchantLogo {
	this := MerchantLogo{}
	return &this
}

// NewMerchantLogoWithDefaults instantiates a new MerchantLogo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantLogoWithDefaults() *MerchantLogo {
	this := MerchantLogo{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *MerchantLogo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantLogo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *MerchantLogo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *MerchantLogo) SetUrl(v string) {
	o.Url = &v
}

func (o MerchantLogo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantLogo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableMerchantLogo struct {
	value *MerchantLogo
	isSet bool
}

func (v NullableMerchantLogo) Get() *MerchantLogo {
	return v.value
}

func (v *NullableMerchantLogo) Set(val *MerchantLogo) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantLogo) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantLogo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantLogo(val *MerchantLogo) *NullableMerchantLogo {
	return &NullableMerchantLogo{value: val, isSet: true}
}

func (v NullableMerchantLogo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantLogo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


