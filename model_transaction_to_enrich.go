/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionToEnrich type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionToEnrich{}

// TransactionToEnrich struct for TransactionToEnrich
type TransactionToEnrich struct {
	// A unique ID for the transaction that to help you tie data back to your systems.
	Id string `json:"id"`
	// The name of the merchant if available or a description of the transaction.
	Description string `json:"description"`
	// The merchant category code.
	Mcc *string `json:"mcc,omitempty"`
	// The amount of the transaction in cents, in the currency of the account. Must be a positive value. Use the type field to indicate the direction.
	Amount float32 `json:"amount"`
	// The direction of the transaction.
	Direction string `json:"direction"`
	CountryCode *string `json:"country_code,omitempty"`
	IsoCurrencyCode *string `json:"iso_currency_code,omitempty"`
	// The date the transaction was posted.
	Date *string `json:"date,omitempty"`
	OwnerType *string `json:"owner_type,omitempty"`
}

type _TransactionToEnrich TransactionToEnrich

// NewTransactionToEnrich instantiates a new TransactionToEnrich object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionToEnrich(id string, description string, amount float32, direction string) *TransactionToEnrich {
	this := TransactionToEnrich{}
	this.Id = id
	this.Description = description
	this.Amount = amount
	this.Direction = direction
	var countryCode string = "US"
	this.CountryCode = &countryCode
	var isoCurrencyCode string = "USD"
	this.IsoCurrencyCode = &isoCurrencyCode
	var ownerType string = "consumer"
	this.OwnerType = &ownerType
	return &this
}

// NewTransactionToEnrichWithDefaults instantiates a new TransactionToEnrich object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionToEnrichWithDefaults() *TransactionToEnrich {
	this := TransactionToEnrich{}
	var countryCode string = "US"
	this.CountryCode = &countryCode
	var isoCurrencyCode string = "USD"
	this.IsoCurrencyCode = &isoCurrencyCode
	var ownerType string = "consumer"
	this.OwnerType = &ownerType
	return &this
}

// GetId returns the Id field value
func (o *TransactionToEnrich) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TransactionToEnrich) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TransactionToEnrich) SetId(v string) {
	o.Id = v
}

// GetDescription returns the Description field value
func (o *TransactionToEnrich) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TransactionToEnrich) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TransactionToEnrich) SetDescription(v string) {
	o.Description = v
}

// GetMcc returns the Mcc field value if set, zero value otherwise.
func (o *TransactionToEnrich) GetMcc() string {
	if o == nil || IsNil(o.Mcc) {
		var ret string
		return ret
	}
	return *o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionToEnrich) GetMccOk() (*string, bool) {
	if o == nil || IsNil(o.Mcc) {
		return nil, false
	}
	return o.Mcc, true
}

// HasMcc returns a boolean if a field has been set.
func (o *TransactionToEnrich) HasMcc() bool {
	if o != nil && !IsNil(o.Mcc) {
		return true
	}

	return false
}

// SetMcc gets a reference to the given string and assigns it to the Mcc field.
func (o *TransactionToEnrich) SetMcc(v string) {
	o.Mcc = &v
}

// GetAmount returns the Amount field value
func (o *TransactionToEnrich) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionToEnrich) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionToEnrich) SetAmount(v float32) {
	o.Amount = v
}

// GetDirection returns the Direction field value
func (o *TransactionToEnrich) GetDirection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *TransactionToEnrich) GetDirectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *TransactionToEnrich) SetDirection(v string) {
	o.Direction = v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *TransactionToEnrich) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionToEnrich) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *TransactionToEnrich) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *TransactionToEnrich) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value if set, zero value otherwise.
func (o *TransactionToEnrich) GetIsoCurrencyCode() string {
	if o == nil || IsNil(o.IsoCurrencyCode) {
		var ret string
		return ret
	}
	return *o.IsoCurrencyCode
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionToEnrich) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IsoCurrencyCode) {
		return nil, false
	}
	return o.IsoCurrencyCode, true
}

// HasIsoCurrencyCode returns a boolean if a field has been set.
func (o *TransactionToEnrich) HasIsoCurrencyCode() bool {
	if o != nil && !IsNil(o.IsoCurrencyCode) {
		return true
	}

	return false
}

// SetIsoCurrencyCode gets a reference to the given string and assigns it to the IsoCurrencyCode field.
func (o *TransactionToEnrich) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *TransactionToEnrich) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionToEnrich) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *TransactionToEnrich) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *TransactionToEnrich) SetDate(v string) {
	o.Date = &v
}

// GetOwnerType returns the OwnerType field value if set, zero value otherwise.
func (o *TransactionToEnrich) GetOwnerType() string {
	if o == nil || IsNil(o.OwnerType) {
		var ret string
		return ret
	}
	return *o.OwnerType
}

// GetOwnerTypeOk returns a tuple with the OwnerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionToEnrich) GetOwnerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerType) {
		return nil, false
	}
	return o.OwnerType, true
}

// HasOwnerType returns a boolean if a field has been set.
func (o *TransactionToEnrich) HasOwnerType() bool {
	if o != nil && !IsNil(o.OwnerType) {
		return true
	}

	return false
}

// SetOwnerType gets a reference to the given string and assigns it to the OwnerType field.
func (o *TransactionToEnrich) SetOwnerType(v string) {
	o.OwnerType = &v
}

func (o TransactionToEnrich) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionToEnrich) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["description"] = o.Description
	if !IsNil(o.Mcc) {
		toSerialize["mcc"] = o.Mcc
	}
	toSerialize["amount"] = o.Amount
	toSerialize["direction"] = o.Direction
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.IsoCurrencyCode) {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.OwnerType) {
		toSerialize["owner_type"] = o.OwnerType
	}
	return toSerialize, nil
}

func (o *TransactionToEnrich) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"description",
		"amount",
		"direction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionToEnrich := _TransactionToEnrich{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionToEnrich)

	if err != nil {
		return err
	}

	*o = TransactionToEnrich(varTransactionToEnrich)

	return err
}

type NullableTransactionToEnrich struct {
	value *TransactionToEnrich
	isSet bool
}

func (v NullableTransactionToEnrich) Get() *TransactionToEnrich {
	return v.value
}

func (v *NullableTransactionToEnrich) Set(val *TransactionToEnrich) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionToEnrich) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionToEnrich) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionToEnrich(val *TransactionToEnrich) *NullableTransactionToEnrich {
	return &NullableTransactionToEnrich{value: val, isSet: true}
}

func (v NullableTransactionToEnrich) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionToEnrich) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


