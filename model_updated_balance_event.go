/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdatedBalanceEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatedBalanceEvent{}

// UpdatedBalanceEvent struct for UpdatedBalanceEvent
type UpdatedBalanceEvent struct {
	EventType string `json:"event_type"`
	// The ISO-4217 currency code.
	IsoCurrencyCode string `json:"iso_currency_code"`
	// Datetime that the balance is accurate for In ISO-8601 format
	Timestamp string `json:"timestamp"`
	// The current balance of the account factoring in pending transactions.
	Available NullableFloat32 `json:"available,omitempty"`
	// The current balance of the account without factoring in pending transactions.
	Current NullableFloat32 `json:"current,omitempty"`
}

type _UpdatedBalanceEvent UpdatedBalanceEvent

// NewUpdatedBalanceEvent instantiates a new UpdatedBalanceEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatedBalanceEvent(eventType string, isoCurrencyCode string, timestamp string) *UpdatedBalanceEvent {
	this := UpdatedBalanceEvent{}
	this.EventType = eventType
	this.IsoCurrencyCode = isoCurrencyCode
	this.Timestamp = timestamp
	return &this
}

// NewUpdatedBalanceEventWithDefaults instantiates a new UpdatedBalanceEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatedBalanceEventWithDefaults() *UpdatedBalanceEvent {
	this := UpdatedBalanceEvent{}
	return &this
}

// GetEventType returns the EventType field value
func (o *UpdatedBalanceEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *UpdatedBalanceEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *UpdatedBalanceEvent) SetEventType(v string) {
	o.EventType = v
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value
func (o *UpdatedBalanceEvent) GetIsoCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsoCurrencyCode
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *UpdatedBalanceEvent) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsoCurrencyCode, true
}

// SetIsoCurrencyCode sets field value
func (o *UpdatedBalanceEvent) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode = v
}

// GetTimestamp returns the Timestamp field value
func (o *UpdatedBalanceEvent) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *UpdatedBalanceEvent) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *UpdatedBalanceEvent) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetAvailable returns the Available field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatedBalanceEvent) GetAvailable() float32 {
	if o == nil || IsNil(o.Available.Get()) {
		var ret float32
		return ret
	}
	return *o.Available.Get()
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatedBalanceEvent) GetAvailableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Available.Get(), o.Available.IsSet()
}

// HasAvailable returns a boolean if a field has been set.
func (o *UpdatedBalanceEvent) HasAvailable() bool {
	if o != nil && o.Available.IsSet() {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given NullableFloat32 and assigns it to the Available field.
func (o *UpdatedBalanceEvent) SetAvailable(v float32) {
	o.Available.Set(&v)
}
// SetAvailableNil sets the value for Available to be an explicit nil
func (o *UpdatedBalanceEvent) SetAvailableNil() {
	o.Available.Set(nil)
}

// UnsetAvailable ensures that no value is present for Available, not even an explicit nil
func (o *UpdatedBalanceEvent) UnsetAvailable() {
	o.Available.Unset()
}

// GetCurrent returns the Current field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatedBalanceEvent) GetCurrent() float32 {
	if o == nil || IsNil(o.Current.Get()) {
		var ret float32
		return ret
	}
	return *o.Current.Get()
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatedBalanceEvent) GetCurrentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Current.Get(), o.Current.IsSet()
}

// HasCurrent returns a boolean if a field has been set.
func (o *UpdatedBalanceEvent) HasCurrent() bool {
	if o != nil && o.Current.IsSet() {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given NullableFloat32 and assigns it to the Current field.
func (o *UpdatedBalanceEvent) SetCurrent(v float32) {
	o.Current.Set(&v)
}
// SetCurrentNil sets the value for Current to be an explicit nil
func (o *UpdatedBalanceEvent) SetCurrentNil() {
	o.Current.Set(nil)
}

// UnsetCurrent ensures that no value is present for Current, not even an explicit nil
func (o *UpdatedBalanceEvent) UnsetCurrent() {
	o.Current.Unset()
}

func (o UpdatedBalanceEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatedBalanceEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_type"] = o.EventType
	toSerialize["iso_currency_code"] = o.IsoCurrencyCode
	toSerialize["timestamp"] = o.Timestamp
	if o.Available.IsSet() {
		toSerialize["available"] = o.Available.Get()
	}
	if o.Current.IsSet() {
		toSerialize["current"] = o.Current.Get()
	}
	return toSerialize, nil
}

func (o *UpdatedBalanceEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_type",
		"iso_currency_code",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatedBalanceEvent := _UpdatedBalanceEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdatedBalanceEvent)

	if err != nil {
		return err
	}

	*o = UpdatedBalanceEvent(varUpdatedBalanceEvent)

	return err
}

type NullableUpdatedBalanceEvent struct {
	value *UpdatedBalanceEvent
	isSet bool
}

func (v NullableUpdatedBalanceEvent) Get() *UpdatedBalanceEvent {
	return v.value
}

func (v *NullableUpdatedBalanceEvent) Set(val *UpdatedBalanceEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatedBalanceEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatedBalanceEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatedBalanceEvent(val *UpdatedBalanceEvent) *NullableUpdatedBalanceEvent {
	return &NullableUpdatedBalanceEvent{value: val, isSet: true}
}

func (v NullableUpdatedBalanceEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatedBalanceEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


