/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"fmt"
)

// Product the model 'Product'
type Product string

// List of Product
const (
	PRODUCT_ACCOUNT_DETAILS Product = "account_details"
	PRODUCT_BALANCE Product = "balance"
	PRODUCT_OWNERSHIP Product = "ownership"
	PRODUCT_TRANSACTIONS Product = "transactions"
	PRODUCT_INVESTMENTS Product = "investments"
	PRODUCT_ASSETS Product = "assets"
)

// All allowed values of Product enum
var AllowedProductEnumValues = []Product{
	"account_details",
	"balance",
	"ownership",
	"transactions",
	"investments",
	"assets",
}

func (v *Product) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Product(value)
	for _, existing := range AllowedProductEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Product", value)
}

// NewProductFromValue returns a pointer to a valid Product
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductFromValue(v string) (*Product, error) {
	ev := Product(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Product: valid values are %v", v, AllowedProductEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Product) IsValid() bool {
	for _, existing := range AllowedProductEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Product value
func (v Product) Ptr() *Product {
	return &v
}

type NullableProduct struct {
	value *Product
	isSet bool
}

func (v NullableProduct) Get() *Product {
	return v.value
}

func (v *NullableProduct) Set(val *Product) {
	v.value = val
	v.isSet = true
}

func (v NullableProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduct(val *Product) *NullableProduct {
	return &NullableProduct{value: val, isSet: true}
}

func (v NullableProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

