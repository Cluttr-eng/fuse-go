/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
)

// checks if the FuseApiErrorData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FuseApiErrorData{}

// FuseApiErrorData struct for FuseApiErrorData
type FuseApiErrorData struct {
	Aggregator *Aggregator `json:"aggregator,omitempty"`
	Errors []FuseApiAggregatorError `json:"errors,omitempty"`
}

// NewFuseApiErrorData instantiates a new FuseApiErrorData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFuseApiErrorData() *FuseApiErrorData {
	this := FuseApiErrorData{}
	return &this
}

// NewFuseApiErrorDataWithDefaults instantiates a new FuseApiErrorData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFuseApiErrorDataWithDefaults() *FuseApiErrorData {
	this := FuseApiErrorData{}
	return &this
}

// GetAggregator returns the Aggregator field value if set, zero value otherwise.
func (o *FuseApiErrorData) GetAggregator() Aggregator {
	if o == nil || IsNil(o.Aggregator) {
		var ret Aggregator
		return ret
	}
	return *o.Aggregator
}

// GetAggregatorOk returns a tuple with the Aggregator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuseApiErrorData) GetAggregatorOk() (*Aggregator, bool) {
	if o == nil || IsNil(o.Aggregator) {
		return nil, false
	}
	return o.Aggregator, true
}

// HasAggregator returns a boolean if a field has been set.
func (o *FuseApiErrorData) HasAggregator() bool {
	if o != nil && !IsNil(o.Aggregator) {
		return true
	}

	return false
}

// SetAggregator gets a reference to the given Aggregator and assigns it to the Aggregator field.
func (o *FuseApiErrorData) SetAggregator(v Aggregator) {
	o.Aggregator = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *FuseApiErrorData) GetErrors() []FuseApiAggregatorError {
	if o == nil || IsNil(o.Errors) {
		var ret []FuseApiAggregatorError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuseApiErrorData) GetErrorsOk() ([]FuseApiAggregatorError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *FuseApiErrorData) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []FuseApiAggregatorError and assigns it to the Errors field.
func (o *FuseApiErrorData) SetErrors(v []FuseApiAggregatorError) {
	o.Errors = v
}

func (o FuseApiErrorData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FuseApiErrorData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregator) {
		toSerialize["aggregator"] = o.Aggregator
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableFuseApiErrorData struct {
	value *FuseApiErrorData
	isSet bool
}

func (v NullableFuseApiErrorData) Get() *FuseApiErrorData {
	return v.value
}

func (v *NullableFuseApiErrorData) Set(val *FuseApiErrorData) {
	v.value = val
	v.isSet = true
}

func (v NullableFuseApiErrorData) IsSet() bool {
	return v.isSet
}

func (v *NullableFuseApiErrorData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFuseApiErrorData(val *FuseApiErrorData) *NullableFuseApiErrorData {
	return &NullableFuseApiErrorData{value: val, isSet: true}
}

func (v NullableFuseApiErrorData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFuseApiErrorData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


