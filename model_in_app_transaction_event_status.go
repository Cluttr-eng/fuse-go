/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"fmt"
)

// InAppTransactionEventStatus the model 'InAppTransactionEventStatus'
type InAppTransactionEventStatus string

// List of InAppTransactionEventStatus
const (
	INAPPTRANSACTIONEVENTSTATUS_PENDING InAppTransactionEventStatus = "pending"
	INAPPTRANSACTIONEVENTSTATUS_SUCCEEDED InAppTransactionEventStatus = "succeeded"
	INAPPTRANSACTIONEVENTSTATUS_FAILED InAppTransactionEventStatus = "failed"
)

// All allowed values of InAppTransactionEventStatus enum
var AllowedInAppTransactionEventStatusEnumValues = []InAppTransactionEventStatus{
	"pending",
	"succeeded",
	"failed",
}

func (v *InAppTransactionEventStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InAppTransactionEventStatus(value)
	for _, existing := range AllowedInAppTransactionEventStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InAppTransactionEventStatus", value)
}

// NewInAppTransactionEventStatusFromValue returns a pointer to a valid InAppTransactionEventStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInAppTransactionEventStatusFromValue(v string) (*InAppTransactionEventStatus, error) {
	ev := InAppTransactionEventStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InAppTransactionEventStatus: valid values are %v", v, AllowedInAppTransactionEventStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InAppTransactionEventStatus) IsValid() bool {
	for _, existing := range AllowedInAppTransactionEventStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InAppTransactionEventStatus value
func (v InAppTransactionEventStatus) Ptr() *InAppTransactionEventStatus {
	return &v
}

type NullableInAppTransactionEventStatus struct {
	value *InAppTransactionEventStatus
	isSet bool
}

func (v NullableInAppTransactionEventStatus) Get() *InAppTransactionEventStatus {
	return v.value
}

func (v *NullableInAppTransactionEventStatus) Set(val *InAppTransactionEventStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInAppTransactionEventStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInAppTransactionEventStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInAppTransactionEventStatus(val *InAppTransactionEventStatus) *NullableInAppTransactionEventStatus {
	return &NullableInAppTransactionEventStatus{value: val, isSet: true}
}

func (v NullableInAppTransactionEventStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInAppTransactionEventStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

