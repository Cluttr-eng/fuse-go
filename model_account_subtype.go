/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"fmt"
)

// AccountSubtype The account's subtype
type AccountSubtype string

// List of AccountSubtype
const (
	ACCOUNTSUBTYPE_CHECKING AccountSubtype = "checking"
	ACCOUNTSUBTYPE_SAVINGS AccountSubtype = "savings"
	ACCOUNTSUBTYPE_CHECKING_OR_SAVINGS AccountSubtype = "checking_or_savings"
	ACCOUNTSUBTYPE_BUSINESS_CHECKING_OR_SAVINGS AccountSubtype = "business_checking_or_savings"
	ACCOUNTSUBTYPE_BUSINESS_SAVINGS AccountSubtype = "business_savings"
	ACCOUNTSUBTYPE_MONEY_MARKET AccountSubtype = "money_market"
	ACCOUNTSUBTYPE_CERTIFICATE_OF_DEPOSIT AccountSubtype = "certificate_of_deposit"
	ACCOUNTSUBTYPE_TREASURY AccountSubtype = "treasury"
	ACCOUNTSUBTYPE_CREDIT_CARD AccountSubtype = "credit_card"
	ACCOUNTSUBTYPE_DEBIT_CARD AccountSubtype = "debit_card"
	ACCOUNTSUBTYPE_BONDS AccountSubtype = "bonds"
	ACCOUNTSUBTYPE_HSA AccountSubtype = "hsa"
	ACCOUNTSUBTYPE_PAYPAL AccountSubtype = "paypal"
	ACCOUNTSUBTYPE_PREPAID AccountSubtype = "prepaid"
	ACCOUNTSUBTYPE_CASH_MANAGEMENT AccountSubtype = "cash_management"
	ACCOUNTSUBTYPE_EBT AccountSubtype = "ebt"
	ACCOUNTSUBTYPE_AUTO AccountSubtype = "auto"
	ACCOUNTSUBTYPE_BUSINESS AccountSubtype = "business"
	ACCOUNTSUBTYPE_COMMERCIAL AccountSubtype = "commercial"
	ACCOUNTSUBTYPE_CONSTRUCTION AccountSubtype = "construction"
	ACCOUNTSUBTYPE_CONSUMER AccountSubtype = "consumer"
	ACCOUNTSUBTYPE_HOME_EQUITY AccountSubtype = "home_equity"
	ACCOUNTSUBTYPE_FOREIGN AccountSubtype = "foreign"
	ACCOUNTSUBTYPE_LOAN AccountSubtype = "loan"
	ACCOUNTSUBTYPE_MORTGAGE AccountSubtype = "mortgage"
	ACCOUNTSUBTYPE_OVERDRAFT AccountSubtype = "overdraft"
	ACCOUNTSUBTYPE_LINE_OF_CREDIT AccountSubtype = "line_of_credit"
	ACCOUNTSUBTYPE_STUDENT AccountSubtype = "student"
	ACCOUNTSUBTYPE__529 AccountSubtype = "529"
	ACCOUNTSUBTYPE__401_A AccountSubtype = "401_a"
	ACCOUNTSUBTYPE__401_K AccountSubtype = "401_k"
	ACCOUNTSUBTYPE__403_B AccountSubtype = "403_b"
	ACCOUNTSUBTYPE__457_B AccountSubtype = "457_b"
	ACCOUNTSUBTYPE_FUNDS AccountSubtype = "funds"
	ACCOUNTSUBTYPE_BROKERAGE AccountSubtype = "brokerage"
	ACCOUNTSUBTYPE_SECURITIES AccountSubtype = "securities"
	ACCOUNTSUBTYPE_STOCKS AccountSubtype = "stocks"
	ACCOUNTSUBTYPE_CASH_ISA AccountSubtype = "cash_isa"
	ACCOUNTSUBTYPE_CRYPTO_EXCHANGE AccountSubtype = "crypto_exchange"
	ACCOUNTSUBTYPE_EDUCATION_SAVING_ACCOUNT AccountSubtype = "education_saving_account"
	ACCOUNTSUBTYPE_FIXED_ANNUITY AccountSubtype = "fixed_annuity"
	ACCOUNTSUBTYPE_GIC AccountSubtype = "gic"
	ACCOUNTSUBTYPE_HEALTH_REIMBURSEMENT_ARRANGEMENT AccountSubtype = "health_reimbursement_arrangement"
	ACCOUNTSUBTYPE_IRA AccountSubtype = "ira"
	ACCOUNTSUBTYPE_ISA AccountSubtype = "isa"
	ACCOUNTSUBTYPE_KEOGH AccountSubtype = "keogh"
	ACCOUNTSUBTYPE_LIF AccountSubtype = "lif"
	ACCOUNTSUBTYPE_LIFE_INSURANCE AccountSubtype = "life_insurance"
	ACCOUNTSUBTYPE_LIRA AccountSubtype = "lira"
	ACCOUNTSUBTYPE_LRIF AccountSubtype = "lrif"
	ACCOUNTSUBTYPE_LRSP AccountSubtype = "lrsp"
	ACCOUNTSUBTYPE_MUTUAL_FUND AccountSubtype = "mutual_fund"
	ACCOUNTSUBTYPE_NON_CUSTODIAL_WALLET AccountSubtype = "non_custodial_wallet"
	ACCOUNTSUBTYPE_NON_TAXABLE_BROKERAGE_ACCOUNT AccountSubtype = "non_taxable_brokerage_account"
	ACCOUNTSUBTYPE_OTHER_ANNUITY AccountSubtype = "other_annuity"
	ACCOUNTSUBTYPE_OTHER_INSURANCE AccountSubtype = "other_insurance"
	ACCOUNTSUBTYPE_PENSION AccountSubtype = "pension"
	ACCOUNTSUBTYPE_PRIF AccountSubtype = "prif"
	ACCOUNTSUBTYPE_PROFIT_SHARING_PLAN AccountSubtype = "profit_sharing_plan"
	ACCOUNTSUBTYPE_QSHR AccountSubtype = "qshr"
	ACCOUNTSUBTYPE_RDSP AccountSubtype = "rdsp"
	ACCOUNTSUBTYPE_RESP AccountSubtype = "resp"
	ACCOUNTSUBTYPE_RETIREMENT AccountSubtype = "retirement"
	ACCOUNTSUBTYPE_RLIF AccountSubtype = "rlif"
	ACCOUNTSUBTYPE_ROTH_IRA AccountSubtype = "roth_ira"
	ACCOUNTSUBTYPE_ROTH_401_K AccountSubtype = "roth_401_k"
	ACCOUNTSUBTYPE_RRIF AccountSubtype = "rrif"
	ACCOUNTSUBTYPE_RRSP AccountSubtype = "rrsp"
	ACCOUNTSUBTYPE_SARSEP AccountSubtype = "sarsep"
	ACCOUNTSUBTYPE_SEP_IRA AccountSubtype = "sep_ira"
	ACCOUNTSUBTYPE_SIMPLE_IRA AccountSubtype = "simple_ira"
	ACCOUNTSUBTYPE_SIPP AccountSubtype = "sipp"
	ACCOUNTSUBTYPE_STOCK_PLAN AccountSubtype = "stock_plan"
	ACCOUNTSUBTYPE_TFSA AccountSubtype = "tfsa"
	ACCOUNTSUBTYPE_TRUST AccountSubtype = "trust"
	ACCOUNTSUBTYPE_UGMA AccountSubtype = "ugma"
	ACCOUNTSUBTYPE_UTMA AccountSubtype = "utma"
	ACCOUNTSUBTYPE_VARIABLE_ANNUITY AccountSubtype = "variable_annuity"
	ACCOUNTSUBTYPE_SMALL_BUSINESS AccountSubtype = "small_business"
	ACCOUNTSUBTYPE_PERSONAL AccountSubtype = "personal"
	ACCOUNTSUBTYPE_PERSONAL_WITH_COLLATERAL AccountSubtype = "personal_with_collateral"
	ACCOUNTSUBTYPE__457 AccountSubtype = "457"
	ACCOUNTSUBTYPE_ROLLOVER_IRA AccountSubtype = "rollover_ira"
	ACCOUNTSUBTYPE_TAXABLE AccountSubtype = "taxable"
	ACCOUNTSUBTYPE_NON_TAXABLE AccountSubtype = "non_taxable"
	ACCOUNTSUBTYPE_EMPLOYEE_STOCK_OWNERSHIP_PLAN AccountSubtype = "employee_stock_ownership_plan"
	ACCOUNTSUBTYPE_INDIVIDUAL AccountSubtype = "individual"
	ACCOUNTSUBTYPE_CASH_MANAGEMENT_ACCOUNT AccountSubtype = "cash_management_account"
	ACCOUNTSUBTYPE_EMPLOYEE_STOCK_PURCHASE_PLAN AccountSubtype = "employee_stock_purchase_plan"
	ACCOUNTSUBTYPE_REGISTERED_EDUCATION_SAVINGS_PLAN AccountSubtype = "registered_education_savings_plan"
	ACCOUNTSUBTYPE_FIXED_ANNUITY_TRADITIONAL_IRA AccountSubtype = "fixed_annuity_traditional_ira"
	ACCOUNTSUBTYPE_INHERITED_TRADITIONAL_IRA AccountSubtype = "inherited_traditional_ira"
	ACCOUNTSUBTYPE_FIXED_ANNUITY_ROTH_IRA AccountSubtype = "fixed_annuity_roth_ira"
	ACCOUNTSUBTYPE_VARIABLE_ANNUITY_ROTH_IRA AccountSubtype = "variable_annuity_roth_ira"
	ACCOUNTSUBTYPE_INHERITED_ROTH_IRA AccountSubtype = "inherited_roth_ira"
	ACCOUNTSUBTYPE_ADVISORY_ACCOUNT AccountSubtype = "advisory_account"
	ACCOUNTSUBTYPE_BROKERAGE_MARGIN AccountSubtype = "brokerage_margin"
	ACCOUNTSUBTYPE_CHARITABLE_GIFT_ACCOUNT AccountSubtype = "charitable_gift_account"
	ACCOUNTSUBTYPE_CHURCH_ACCOUNT AccountSubtype = "church_account"
	ACCOUNTSUBTYPE_CONSERVATORSHIP AccountSubtype = "conservatorship"
	ACCOUNTSUBTYPE_CUSTODIAL AccountSubtype = "custodial"
	ACCOUNTSUBTYPE_DEFINED_BENEFIT_PLAN AccountSubtype = "defined_benefit_plan"
	ACCOUNTSUBTYPE_DEFINED_CONTRIBUTION_PLAN AccountSubtype = "defined_contribution_plan"
	ACCOUNTSUBTYPE_EDUCATIONAL AccountSubtype = "educational"
	ACCOUNTSUBTYPE_ESTATE AccountSubtype = "estate"
	ACCOUNTSUBTYPE_EXECUTOR AccountSubtype = "executor"
	ACCOUNTSUBTYPE_GROUP_RETIREMENT_SAVINGS_PLAN AccountSubtype = "group_retirement_savings_plan"
	ACCOUNTSUBTYPE_GUARANTEED_INVESTMENT_CERTIFICATE AccountSubtype = "guaranteed_investment_certificate"
	ACCOUNTSUBTYPE_INDEXED_ANNUITY AccountSubtype = "indexed_annuity"
	ACCOUNTSUBTYPE_INVESTMENT_CLUB AccountSubtype = "investment_club"
	ACCOUNTSUBTYPE_IRREVOCABLE_TRUST AccountSubtype = "irrevocable_trust"
	ACCOUNTSUBTYPE_JOINT_TENANTS_BY_ENTIRETY AccountSubtype = "joint_tenants_by_entirety"
	ACCOUNTSUBTYPE_JOINT_TENANTS_COMMUNITY_PROPERTY AccountSubtype = "joint_tenants_community_property"
	ACCOUNTSUBTYPE_JOINT_TENANTS_IN_COMMON AccountSubtype = "joint_tenants_in_common"
	ACCOUNTSUBTYPE_JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP AccountSubtype = "joint_tenants_with_rights_of_survivorship"
	ACCOUNTSUBTYPE_KEOUGH_PLAN AccountSubtype = "keough_plan"
	ACCOUNTSUBTYPE_LIVING_TRUST AccountSubtype = "living_trust"
	ACCOUNTSUBTYPE_LOCKED_IN_RETIREMENT_ACCOUNT AccountSubtype = "locked_in_retirement_account"
	ACCOUNTSUBTYPE_LOCKED_IN_RETIREMENT_INVESTMENT_FUND AccountSubtype = "locked_in_retirement_investment_fund"
	ACCOUNTSUBTYPE_LOCKED_IN_RETIREMENT_SAVINGS_ACCOUNT AccountSubtype = "locked_in_retirement_savings_account"
	ACCOUNTSUBTYPE_MONEY_PURCHASE_PLAN AccountSubtype = "money_purchase_plan"
	ACCOUNTSUBTYPE_PARTNERSHIP AccountSubtype = "partnership"
	ACCOUNTSUBTYPE__409_A AccountSubtype = "409_a"
	ACCOUNTSUBTYPE_RPP AccountSubtype = "rpp"
	ACCOUNTSUBTYPE_REVOCABLE_TRUST AccountSubtype = "revocable_trust"
	ACCOUNTSUBTYPE_ROTH_CONVERSION AccountSubtype = "roth_conversion"
	ACCOUNTSUBTYPE_SOLE_PROPRIETORSHIP AccountSubtype = "sole_proprietorship"
	ACCOUNTSUBTYPE_SPOUSAL_IRA AccountSubtype = "spousal_ira"
	ACCOUNTSUBTYPE_SPOUSAL_ROTH_IRA AccountSubtype = "spousal_roth_ira"
	ACCOUNTSUBTYPE_TESTAMENTARY_TRUST AccountSubtype = "testamentary_trust"
	ACCOUNTSUBTYPE_THRIFT_SAVINGS_PLAN AccountSubtype = "thrift_savings_plan"
	ACCOUNTSUBTYPE_INHERITED_ANNUITY AccountSubtype = "inherited_annuity"
	ACCOUNTSUBTYPE_CORPORATE_ACCOUNT AccountSubtype = "corporate_account"
	ACCOUNTSUBTYPE_LIMITED_LIABILITY_ACCOUNT AccountSubtype = "limited_liability_account"
	ACCOUNTSUBTYPE_BOAT AccountSubtype = "boat"
	ACCOUNTSUBTYPE_POWERSPORTS AccountSubtype = "powersports"
	ACCOUNTSUBTYPE_RV AccountSubtype = "rv"
	ACCOUNTSUBTYPE_HELOC AccountSubtype = "heloc"
	ACCOUNTSUBTYPE_VEHICLE_INSURANCE AccountSubtype = "vehicle_insurance"
	ACCOUNTSUBTYPE_DISABILITY AccountSubtype = "disability"
	ACCOUNTSUBTYPE_HEALTH AccountSubtype = "health"
	ACCOUNTSUBTYPE_LONG_TERM_CARE AccountSubtype = "long_term_care"
	ACCOUNTSUBTYPE_PROPERTY_AND_CASUALTY AccountSubtype = "property_and_casualty"
	ACCOUNTSUBTYPE_UNIVERSAL_LIFE AccountSubtype = "universal_life"
	ACCOUNTSUBTYPE_TERM_LIFE AccountSubtype = "term_life"
	ACCOUNTSUBTYPE_WHOLE_LIFE AccountSubtype = "whole_life"
	ACCOUNTSUBTYPE_ACCIDENTAL_DEATH_AND_DISMEMBERMENT AccountSubtype = "accidental_death_and_dismemberment"
	ACCOUNTSUBTYPE_VARIABLE_UNIVERSAL_LIFE AccountSubtype = "variable_universal_life"
	ACCOUNTSUBTYPE_REVOLVING AccountSubtype = "revolving"
	ACCOUNTSUBTYPE_OTHER AccountSubtype = "other"
	ACCOUNTSUBTYPE_TIME_DEPOSIT AccountSubtype = "time_deposit"
	ACCOUNTSUBTYPE_ROTH AccountSubtype = "roth"
	ACCOUNTSUBTYPE_MILITARY AccountSubtype = "military"
	ACCOUNTSUBTYPE_INSTALLMENT AccountSubtype = "installment"
	ACCOUNTSUBTYPE_INSTITUTIONAL_TRUST AccountSubtype = "institutional_trust"
	ACCOUNTSUBTYPE_HOME_LINE_OF_CREDIT AccountSubtype = "home_line_of_credit"
	ACCOUNTSUBTYPE_GUARDIAN AccountSubtype = "guardian"
	ACCOUNTSUBTYPE_COMMERCIAL_LINE_OF_CREDIT AccountSubtype = "commercial_line_of_credit"
	ACCOUNTSUBTYPE_CHARGE AccountSubtype = "charge"
	ACCOUNTSUBTYPE_COVERDELL AccountSubtype = "coverdell"
	ACCOUNTSUBTYPE_ESCROW AccountSubtype = "escrow"
	ACCOUNTSUBTYPE_MINUS AccountSubtype = "-"
)

// All allowed values of AccountSubtype enum
var AllowedAccountSubtypeEnumValues = []AccountSubtype{
	"checking",
	"savings",
	"checking_or_savings",
	"business_checking_or_savings",
	"business_savings",
	"money_market",
	"certificate_of_deposit",
	"treasury",
	"credit_card",
	"debit_card",
	"bonds",
	"hsa",
	"paypal",
	"prepaid",
	"cash_management",
	"ebt",
	"auto",
	"business",
	"commercial",
	"construction",
	"consumer",
	"home_equity",
	"foreign",
	"loan",
	"mortgage",
	"overdraft",
	"line_of_credit",
	"student",
	"529",
	"401_a",
	"401_k",
	"403_b",
	"457_b",
	"funds",
	"brokerage",
	"securities",
	"stocks",
	"cash_isa",
	"crypto_exchange",
	"education_saving_account",
	"fixed_annuity",
	"gic",
	"health_reimbursement_arrangement",
	"ira",
	"isa",
	"keogh",
	"lif",
	"life_insurance",
	"lira",
	"lrif",
	"lrsp",
	"mutual_fund",
	"non_custodial_wallet",
	"non_taxable_brokerage_account",
	"other_annuity",
	"other_insurance",
	"pension",
	"prif",
	"profit_sharing_plan",
	"qshr",
	"rdsp",
	"resp",
	"retirement",
	"rlif",
	"roth_ira",
	"roth_401_k",
	"rrif",
	"rrsp",
	"sarsep",
	"sep_ira",
	"simple_ira",
	"sipp",
	"stock_plan",
	"tfsa",
	"trust",
	"ugma",
	"utma",
	"variable_annuity",
	"small_business",
	"personal",
	"personal_with_collateral",
	"457",
	"rollover_ira",
	"taxable",
	"non_taxable",
	"employee_stock_ownership_plan",
	"individual",
	"cash_management_account",
	"employee_stock_purchase_plan",
	"registered_education_savings_plan",
	"fixed_annuity_traditional_ira",
	"inherited_traditional_ira",
	"fixed_annuity_roth_ira",
	"variable_annuity_roth_ira",
	"inherited_roth_ira",
	"advisory_account",
	"brokerage_margin",
	"charitable_gift_account",
	"church_account",
	"conservatorship",
	"custodial",
	"defined_benefit_plan",
	"defined_contribution_plan",
	"educational",
	"estate",
	"executor",
	"group_retirement_savings_plan",
	"guaranteed_investment_certificate",
	"indexed_annuity",
	"investment_club",
	"irrevocable_trust",
	"joint_tenants_by_entirety",
	"joint_tenants_community_property",
	"joint_tenants_in_common",
	"joint_tenants_with_rights_of_survivorship",
	"keough_plan",
	"living_trust",
	"locked_in_retirement_account",
	"locked_in_retirement_investment_fund",
	"locked_in_retirement_savings_account",
	"money_purchase_plan",
	"partnership",
	"409_a",
	"rpp",
	"revocable_trust",
	"roth_conversion",
	"sole_proprietorship",
	"spousal_ira",
	"spousal_roth_ira",
	"testamentary_trust",
	"thrift_savings_plan",
	"inherited_annuity",
	"corporate_account",
	"limited_liability_account",
	"boat",
	"powersports",
	"rv",
	"heloc",
	"vehicle_insurance",
	"disability",
	"health",
	"long_term_care",
	"property_and_casualty",
	"universal_life",
	"term_life",
	"whole_life",
	"accidental_death_and_dismemberment",
	"variable_universal_life",
	"revolving",
	"other",
	"time_deposit",
	"roth",
	"military",
	"installment",
	"institutional_trust",
	"home_line_of_credit",
	"guardian",
	"commercial_line_of_credit",
	"charge",
	"coverdell",
	"escrow",
	"-",
}

func (v *AccountSubtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountSubtype(value)
	for _, existing := range AllowedAccountSubtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountSubtype", value)
}

// NewAccountSubtypeFromValue returns a pointer to a valid AccountSubtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountSubtypeFromValue(v string) (*AccountSubtype, error) {
	ev := AccountSubtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountSubtype: valid values are %v", v, AllowedAccountSubtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountSubtype) IsValid() bool {
	for _, existing := range AllowedAccountSubtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountSubtype value
func (v AccountSubtype) Ptr() *AccountSubtype {
	return &v
}

type NullableAccountSubtype struct {
	value *AccountSubtype
	isSet bool
}

func (v NullableAccountSubtype) Get() *AccountSubtype {
	return v.value
}

func (v *NullableAccountSubtype) Set(val *AccountSubtype) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSubtype) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSubtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSubtype(val *AccountSubtype) *NullableAccountSubtype {
	return &NullableAccountSubtype{value: val, isSet: true}
}

func (v NullableAccountSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSubtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

