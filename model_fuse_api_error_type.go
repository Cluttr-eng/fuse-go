/*
Fuse

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuse

import (
	"encoding/json"
	"fmt"
)

// FuseApiErrorType the model 'FuseApiErrorType'
type FuseApiErrorType string

// List of FuseApiErrorType
const (
	FUSEAPIERRORTYPE_AUTH_ERROR FuseApiErrorType = "auth_error"
	FUSEAPIERRORTYPE_NOT_FOUND FuseApiErrorType = "not_found"
	FUSEAPIERRORTYPE_BAD_REQUEST FuseApiErrorType = "bad_request"
	FUSEAPIERRORTYPE_SERVER_ERROR FuseApiErrorType = "server_error"
)

// All allowed values of FuseApiErrorType enum
var AllowedFuseApiErrorTypeEnumValues = []FuseApiErrorType{
	"auth_error",
	"not_found",
	"bad_request",
	"server_error",
}

func (v *FuseApiErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FuseApiErrorType(value)
	for _, existing := range AllowedFuseApiErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FuseApiErrorType", value)
}

// NewFuseApiErrorTypeFromValue returns a pointer to a valid FuseApiErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFuseApiErrorTypeFromValue(v string) (*FuseApiErrorType, error) {
	ev := FuseApiErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FuseApiErrorType: valid values are %v", v, AllowedFuseApiErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FuseApiErrorType) IsValid() bool {
	for _, existing := range AllowedFuseApiErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FuseApiErrorType value
func (v FuseApiErrorType) Ptr() *FuseApiErrorType {
	return &v
}

type NullableFuseApiErrorType struct {
	value *FuseApiErrorType
	isSet bool
}

func (v NullableFuseApiErrorType) Get() *FuseApiErrorType {
	return v.value
}

func (v *NullableFuseApiErrorType) Set(val *FuseApiErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableFuseApiErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableFuseApiErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFuseApiErrorType(val *FuseApiErrorType) *NullableFuseApiErrorType {
	return &NullableFuseApiErrorType{value: val, isSet: true}
}

func (v NullableFuseApiErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFuseApiErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

